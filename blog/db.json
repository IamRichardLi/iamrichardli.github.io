{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4715b694eb1688c804ea96aaf652563d971b9723","modified":1569466858918},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1569466812659},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1569466812661},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1569466812660},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1569466812661},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1569466812693},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1569466812658},{"_id":"source/_posts/js-this.md","hash":"89661ad354658352ab3a120bd94e40948e4839bd","modified":1569828789924},{"_id":"source/_posts/test.md","hash":"688839758b73b8d149c11314f6bcb94c16a9dbbc","modified":1569466812659},{"_id":"source/categories/index.md","hash":"65237fc02e9691921ab6affbcea42a65042fca82","modified":1569467444146},{"_id":"source/tags/index.md","hash":"0ee25bec77f74cb3936fa30df216af12fdfd89f3","modified":1569467407825},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1569466812663},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1569466812662},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1569466812663},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1569466812664},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1569466812664},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1569466812665},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1569466812666},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1569466812666},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1569466812667},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1569466812667},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1569466812668},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1569466812669},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1569466812689},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1569466812690},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1569466812690},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1569466812691},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1569466812691},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1569466812692},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1569466812693},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1569466812694},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"c8a0b16aa29466bf4c288b48a4b458b2ac69ada7","modified":1569468097759},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1569466812671},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1569466812671},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1569466812672},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1569466812673},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1569466812674},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1569466812675},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1569466812677},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1569466812679},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1569466812677},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1569466812684},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1569466812685},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1569466812686},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1569466812687},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1569466812687},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1569466812688},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1569466812695},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1569577513262},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1569466812716},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1569466812716},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1569466812718},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1569466812717},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1569466812718},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1569466812719},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1569466812719},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1569466812723},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1569466812724},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1569466812725},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1569466812725},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1569466812681},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1569466812680},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1569466812681},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1569466812682},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1569466812683},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1569466812683},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1569466812695},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"d47c445e66392218676a4731ffb53ff495cfd5bc","modified":1569468266872},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1569466812697},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1569466812697},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1569466812698},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"35d005fe9b730105fe5125a345e181cbe9b6bcc3","modified":1569577613908},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1569466812699},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1569466812699},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1569466812700},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1569466812700},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1569466812701},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1569466812701},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1569466812704},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1569466812705},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1569466812711},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1569466812720},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1569466812721},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1569466812721},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1569466812722},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1569466812722},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1569466812723},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1569466812710},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1569466812708},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1569466812715},{"_id":"public/categories/index.html","hash":"6f68f6dcbf7fc7995a62fe7f54827d9ec2b761c3","modified":1569829814088},{"_id":"public/tags/index.html","hash":"2dc6f5def301df4df3c140bcbc4765b6a29748e2","modified":1569829814088},{"_id":"public/2019/09/26/hello-world/index.html","hash":"414d051c0f4faa8ddbcc53496ff760fd401c6e82","modified":1569829814089},{"_id":"public/2019/04/09/test/index.html","hash":"f007fcfa3e8160df4101c6a688720a6756cae2a0","modified":1569829814089},{"_id":"public/categories/JS/index.html","hash":"eee0b65bb6e841b06ec252459caeabf570603ec8","modified":1569829814089},{"_id":"public/archives/index.html","hash":"f89267ec692721e72c8521ee5ee81570d7d0e76d","modified":1569829814089},{"_id":"public/archives/2019/index.html","hash":"971e0d4ca783a253f4513df809e5ff5dd0741ed5","modified":1569829814089},{"_id":"public/archives/2019/04/index.html","hash":"dba935a26ae64afee2954f18a8ad4b80769f27d7","modified":1569829814089},{"_id":"public/archives/2019/09/index.html","hash":"88ea85494a3e29838a27c47da0b33f7ad0cc6060","modified":1569829814090},{"_id":"public/tags/执行上下文/index.html","hash":"94e3d7bb5a32de73310f27bce8b5bb7d7681c3e7","modified":1569829814090},{"_id":"public/2019/09/26/js-this/index.html","hash":"6cbe10e031742109ed5e19b5b653d60f0eda6a69","modified":1569829814090},{"_id":"public/index.html","hash":"de41e210eec0c216fa69292d16d25dc1bf427435","modified":1569829814090},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1569829814136},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1569829814136},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1569829814137},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1569829814138},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1569829814138},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1569829814138},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1569829814138},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1569829814139},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1569829814139},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1569829815709},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1569829815710},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1569829815733},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1569829815734},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1569829815734},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1569829815734},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1569829815735},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1569829815735},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1569829815735},{"_id":"public/css/style.css","hash":"fcb4f400f8b4a93881201b33e8c27e2283b88f96","modified":1569829815735},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1569829815759},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1569829815762},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1569829815767},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1569829815769}],"Category":[{"name":"JS","_id":"ck1644znz00046nt87xum6c95"}],"Data":[],"Page":[{"title":"categories","date":"2019-09-26T03:10:31.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-26 11:10:31\ntype: \"categories\"\n---\n","updated":"2019-09-26T03:10:44.146Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck1644znj00016nt86lipvjzq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-09-26T03:09:48.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-09-26 11:09:48\ntype: \"tags\"\n---\n","updated":"2019-09-26T03:10:07.825Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck1644zpc00086nt8uexadbx4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-09-26T03:00:12.658Z","updated":"2019-09-26T03:00:12.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1644znb00006nt86plkydi9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"js-this","date":"2019-09-26T03:11:37.000Z","_content":"浅谈一下个人对JS的this的理解。\n\n## 定义\n先来看一下MDN上对this的[定义](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)\n>A property of an execution context (global, function or eval) that, in non–strict mode, is always a reference to an object and in strict mode can be any value.\n\n翻译一下：this是执行上下文的一个属性，在非严格模式中始终指向一个对象，而在严格模式中this可以是任何值。\n\n## 严格模式与非严格模式下 this的差异\n在非严格模式下，若未通过`apply/call`等方式改变了调用，`this`会默认指向全局对象（浏览器下指向`window`，node指向`global`）。\n```\nfunction f1() {\n  return this;\n}\n\n// In a browser:\nf1() === window; // true\n\n// In Node:\nf1() === global; // true\n```\n\n在严格模式下，若`this`未被执行上下文定义，那么他会始终保持为`undefined`。\n```\nfunction f2() {\n  'use strict'; // see strict mode\n  return this;\n}\n\nf2() === undefined; // true\n```\n\n## 经典面试题\n一个经典的面试题，以下代码在浏览器执行后会打印出什么？\n```\nvar a = 5;\nvar obj = {\n    a : 10,\n    foo: function() {\n        console.log(this.a);\n    }\n};\nvar bar = obj.foo;\nobj.foo();\nbar();\n```\n首先要明确一点，`执行上下文`**是在方法执行(或者说被调用)的时候才产生的**，所以`this`也只有在方法执行时才能确定值。\n\n当`obj.foo()`执行时，这个时候可以确定是`obj`调用了`foo`方法，所以`this`指向了`obj`。`foo`方法中的访问的`this.a`此时实际上就是`obj.a`，打印出的结果是`10`。\n\n我们再往下看，当`bar()`执行时，`bar`并没有明确的调用对象，因此这里`this`使用了默认绑定，在非严格模式下指向了全局对象。(关于默认绑定后面的章节会讲)\n\n除了用默认绑定来解释以外，我个人认为其实还可以从另一个角度来看这个问题，已知此时`bar`就相当于`obj.foo`，`this`应该指向的是调用了`bar`方法的那个对象，可是这个时候又是谁调用了`bar`方法呢？\n\n假如我们能以某种方式将`bar()`改写成`x.bar()`，这样的话不就和上一步的`obj.foo()`一样了吗？我们也就能得到`foo`是由`x`调用的，`this`指向的就是`x`。所以这个问题又变成了`x`是否存在？\n\n这个神秘的`x`其实就是全局对象呀！在浏览器环境下，`x`其实就是window。因为这里的`bar`是一个全局变量，所以可以通过`window.bar`访问到。因此在`bar()`执行时，`this`指向了全局对象(window)，打印的值就是`window.a`，也就是`5`。\n\n## Array中的this\n再看一个Array中的this，以下代码在浏览器执行后会打印出什么？\n```\nfunction fn() {\n    console.log(this);\n}\nvar arr = [fn, 1, 2];\narr[0]();\n```\n是不是第一眼看到这段代码感觉有点懵逼？WTF？`this`不是只能指向一个Object的吗？来个Array是什么鬼？\n\n乍一看Array好像跟Object没什么关系，其实抛开map、reduce、filter等等这些数组的操作方法，我们常用的对数组的访问方式无非也就是`arr[index]`和`arr.length`吧。\n\n对于上面的这个数组`arr`来说，`arr[0]`是`fn`，`arr[1]`是`1`，`arr[2]`是`2`，`arr.length`是`3`。那我们是不是可以构造出一个类数组的对象，将数组下标作为`key`，数组元素作为对应的`value`，并且提供一个`length`属性代表`key`的总数，就像下面这样：\n```\nfunction fn() {\n    console.log(this);\n}\nvar arrLike = {\n    '0': fn,\n    '1': 1,\n    '2': 2,\n    'length': 3\n};\narrLike['0']();\n```\n所以啊，Array是一个特殊的Object。如果用`arrLike`这个类数组的对象代入，是不是感觉清晰了一点？\n\n已知`arrLike['0']`是`fn`，相当于以`arrLike.0()`这种形式调用了`foo`方法(只是为了方便说明，实际上不能以这种方式执行)，所以`this`指向了`arrLike`，打印出的结果就是`arrLike`本身，而对于再往上的例子来说，打印出的结果就是`arr`本身。\n\n## this的默认绑定\n如果函数没有明确的调用对象，也就是说函数是独立调用的情况下，this会使用默认绑定，非严格模式下`this`指向全局对象，严格模式下，`this`绑定到`undefined`，严格模式不允许`this`指向全局对象。\n\n在函数中以函数作为参数传递，例如`setTimeOut`和`setInterval`等，这些函数中传递的函数中的`this`指向，在非严格模式指向的是全局对象。\n```\nvar name = 'a';\nvar b = {\n    name: 'b',\n    foo: foo\n};\nfunction foo(){\n    setTimeout(function(){\n        console.log('this is ', this.name);\n    });\n    console.log('this is ', this.name);\n}\nb.foo();\n```\n可以看到`setTimeout`中的注册的`function`是个匿名函数，没有明确的调用对象，该函数是独立调用，所以对于这个`function`来说，`this`使用了默认绑定指向了全局对象。因此`setTimeout`中打印出了`name`的值，即`a`。这段代码执行出来的结果就是`this is b`和`this is a`。\n\n咦，明明`setTimeout`写在前，为什么实际上却先执行了`console.log('this is ', this.name);`呢？这需要另外写一篇文章来讲一下Event Loop了。\n\n## this的隐式绑定\n当函数引用有上下文对象时，`this`会使用隐式绑定，指向这个上下文对象。\n\n简单的说，就是当一个函数作为一个对象的引用属性时，如果通过这个对象调用该函数，函数中的`this`就将被绑定到这个对象上。\n```\nvar obj = {\n    a : 10,\n    foo: function() {\n        console.log(this.a);\n    }\n};\nobj.foo();\n```\n文字解释总是晦涩难懂，对着代码解释才更好理解。`obj`作为一个对象，`foo`是`obj`的一个引用属性，`obj.foo()`就是\"通过这个对象调用该函数\"，也就是`obj`是`foo`的上下文，因此`this`使用隐式绑定指向了`obj`。\n\n### 隐式丢失\n隐式丢失指的是函数中的`this`丢失了上下文对象，此时函数没有明确的调用对象(即上下文)，因此会应用默认绑定。主要有两种情况会发生隐式丢失：\n+ 对象中的函数被赋值给一个全局变量\n```\nfunction foo() {\n  console.log( this.a);\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n};\n\nvar bar = obj.foo; // obj对象中的foo函数被赋值给了一个全局变量bar\nvar a = 1;\nbar();  // 1\n```\n+ 在回调函数中被调用\n```\nfunction foo() {\n  console.log( this.a);\n}\n\nfunction bar(fn) {\n  fn();\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n};\n\nvar a = 1;\n// obj.foo在函数bar中被调用\nbar(obj.foo);  // 1\n```\n\n## this的显式绑定\n显式绑定是指通过`call/apply`修改了函数`this`的指向，也就是修改了函数的上下文对象。\n```\nfunction foo() {\n  console.log(this.a);\n}\n\nvar b = {\n  a: 2\n};\nfoo.call(b);  // 2\n```\n通过`call`改变了`foo`的上下文，指向了`b`，所以打印出来的结果是`b.a`，即`2`。\n### 硬绑定\n通过指定上下文，可以解决隐式丢失的问题。最简单的例子就是`es5`的`bind`函数。实现一个简单的`bind`：\n```\nfunction myBind(fn, context) {\n    return function() {\n        return fn.apply(context, arguments);\n    };\n}\n```\n\n## new绑定\n使用`new`关键字来调用函数时，函数内部的`this`会指向什么？关键在于理解`new`到底做了什么。\n\n这部分我觉得可以单独写一篇文字聊一聊`new`以及如何实现一个`new`。\n\n\n\n\n","source":"_posts/js-this.md","raw":"---\ntitle: js-this\ndate: 2019-09-26 11:11:37\ncategories:\n- JS\ntags:\n- 执行上下文\n---\n浅谈一下个人对JS的this的理解。\n\n## 定义\n先来看一下MDN上对this的[定义](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)\n>A property of an execution context (global, function or eval) that, in non–strict mode, is always a reference to an object and in strict mode can be any value.\n\n翻译一下：this是执行上下文的一个属性，在非严格模式中始终指向一个对象，而在严格模式中this可以是任何值。\n\n## 严格模式与非严格模式下 this的差异\n在非严格模式下，若未通过`apply/call`等方式改变了调用，`this`会默认指向全局对象（浏览器下指向`window`，node指向`global`）。\n```\nfunction f1() {\n  return this;\n}\n\n// In a browser:\nf1() === window; // true\n\n// In Node:\nf1() === global; // true\n```\n\n在严格模式下，若`this`未被执行上下文定义，那么他会始终保持为`undefined`。\n```\nfunction f2() {\n  'use strict'; // see strict mode\n  return this;\n}\n\nf2() === undefined; // true\n```\n\n## 经典面试题\n一个经典的面试题，以下代码在浏览器执行后会打印出什么？\n```\nvar a = 5;\nvar obj = {\n    a : 10,\n    foo: function() {\n        console.log(this.a);\n    }\n};\nvar bar = obj.foo;\nobj.foo();\nbar();\n```\n首先要明确一点，`执行上下文`**是在方法执行(或者说被调用)的时候才产生的**，所以`this`也只有在方法执行时才能确定值。\n\n当`obj.foo()`执行时，这个时候可以确定是`obj`调用了`foo`方法，所以`this`指向了`obj`。`foo`方法中的访问的`this.a`此时实际上就是`obj.a`，打印出的结果是`10`。\n\n我们再往下看，当`bar()`执行时，`bar`并没有明确的调用对象，因此这里`this`使用了默认绑定，在非严格模式下指向了全局对象。(关于默认绑定后面的章节会讲)\n\n除了用默认绑定来解释以外，我个人认为其实还可以从另一个角度来看这个问题，已知此时`bar`就相当于`obj.foo`，`this`应该指向的是调用了`bar`方法的那个对象，可是这个时候又是谁调用了`bar`方法呢？\n\n假如我们能以某种方式将`bar()`改写成`x.bar()`，这样的话不就和上一步的`obj.foo()`一样了吗？我们也就能得到`foo`是由`x`调用的，`this`指向的就是`x`。所以这个问题又变成了`x`是否存在？\n\n这个神秘的`x`其实就是全局对象呀！在浏览器环境下，`x`其实就是window。因为这里的`bar`是一个全局变量，所以可以通过`window.bar`访问到。因此在`bar()`执行时，`this`指向了全局对象(window)，打印的值就是`window.a`，也就是`5`。\n\n## Array中的this\n再看一个Array中的this，以下代码在浏览器执行后会打印出什么？\n```\nfunction fn() {\n    console.log(this);\n}\nvar arr = [fn, 1, 2];\narr[0]();\n```\n是不是第一眼看到这段代码感觉有点懵逼？WTF？`this`不是只能指向一个Object的吗？来个Array是什么鬼？\n\n乍一看Array好像跟Object没什么关系，其实抛开map、reduce、filter等等这些数组的操作方法，我们常用的对数组的访问方式无非也就是`arr[index]`和`arr.length`吧。\n\n对于上面的这个数组`arr`来说，`arr[0]`是`fn`，`arr[1]`是`1`，`arr[2]`是`2`，`arr.length`是`3`。那我们是不是可以构造出一个类数组的对象，将数组下标作为`key`，数组元素作为对应的`value`，并且提供一个`length`属性代表`key`的总数，就像下面这样：\n```\nfunction fn() {\n    console.log(this);\n}\nvar arrLike = {\n    '0': fn,\n    '1': 1,\n    '2': 2,\n    'length': 3\n};\narrLike['0']();\n```\n所以啊，Array是一个特殊的Object。如果用`arrLike`这个类数组的对象代入，是不是感觉清晰了一点？\n\n已知`arrLike['0']`是`fn`，相当于以`arrLike.0()`这种形式调用了`foo`方法(只是为了方便说明，实际上不能以这种方式执行)，所以`this`指向了`arrLike`，打印出的结果就是`arrLike`本身，而对于再往上的例子来说，打印出的结果就是`arr`本身。\n\n## this的默认绑定\n如果函数没有明确的调用对象，也就是说函数是独立调用的情况下，this会使用默认绑定，非严格模式下`this`指向全局对象，严格模式下，`this`绑定到`undefined`，严格模式不允许`this`指向全局对象。\n\n在函数中以函数作为参数传递，例如`setTimeOut`和`setInterval`等，这些函数中传递的函数中的`this`指向，在非严格模式指向的是全局对象。\n```\nvar name = 'a';\nvar b = {\n    name: 'b',\n    foo: foo\n};\nfunction foo(){\n    setTimeout(function(){\n        console.log('this is ', this.name);\n    });\n    console.log('this is ', this.name);\n}\nb.foo();\n```\n可以看到`setTimeout`中的注册的`function`是个匿名函数，没有明确的调用对象，该函数是独立调用，所以对于这个`function`来说，`this`使用了默认绑定指向了全局对象。因此`setTimeout`中打印出了`name`的值，即`a`。这段代码执行出来的结果就是`this is b`和`this is a`。\n\n咦，明明`setTimeout`写在前，为什么实际上却先执行了`console.log('this is ', this.name);`呢？这需要另外写一篇文章来讲一下Event Loop了。\n\n## this的隐式绑定\n当函数引用有上下文对象时，`this`会使用隐式绑定，指向这个上下文对象。\n\n简单的说，就是当一个函数作为一个对象的引用属性时，如果通过这个对象调用该函数，函数中的`this`就将被绑定到这个对象上。\n```\nvar obj = {\n    a : 10,\n    foo: function() {\n        console.log(this.a);\n    }\n};\nobj.foo();\n```\n文字解释总是晦涩难懂，对着代码解释才更好理解。`obj`作为一个对象，`foo`是`obj`的一个引用属性，`obj.foo()`就是\"通过这个对象调用该函数\"，也就是`obj`是`foo`的上下文，因此`this`使用隐式绑定指向了`obj`。\n\n### 隐式丢失\n隐式丢失指的是函数中的`this`丢失了上下文对象，此时函数没有明确的调用对象(即上下文)，因此会应用默认绑定。主要有两种情况会发生隐式丢失：\n+ 对象中的函数被赋值给一个全局变量\n```\nfunction foo() {\n  console.log( this.a);\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n};\n\nvar bar = obj.foo; // obj对象中的foo函数被赋值给了一个全局变量bar\nvar a = 1;\nbar();  // 1\n```\n+ 在回调函数中被调用\n```\nfunction foo() {\n  console.log( this.a);\n}\n\nfunction bar(fn) {\n  fn();\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n};\n\nvar a = 1;\n// obj.foo在函数bar中被调用\nbar(obj.foo);  // 1\n```\n\n## this的显式绑定\n显式绑定是指通过`call/apply`修改了函数`this`的指向，也就是修改了函数的上下文对象。\n```\nfunction foo() {\n  console.log(this.a);\n}\n\nvar b = {\n  a: 2\n};\nfoo.call(b);  // 2\n```\n通过`call`改变了`foo`的上下文，指向了`b`，所以打印出来的结果是`b.a`，即`2`。\n### 硬绑定\n通过指定上下文，可以解决隐式丢失的问题。最简单的例子就是`es5`的`bind`函数。实现一个简单的`bind`：\n```\nfunction myBind(fn, context) {\n    return function() {\n        return fn.apply(context, arguments);\n    };\n}\n```\n\n## new绑定\n使用`new`关键字来调用函数时，函数内部的`this`会指向什么？关键在于理解`new`到底做了什么。\n\n这部分我觉得可以单独写一篇文字聊一聊`new`以及如何实现一个`new`。\n\n\n\n\n","slug":"js-this","published":1,"updated":"2019-09-30T07:33:09.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1644znm00026nt847tgurgf","content":"<p>浅谈一下个人对JS的this的理解。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>先来看一下MDN上对this的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">定义</a></p>\n<blockquote>\n<p>A property of an execution context (global, function or eval) that, in non–strict mode, is always a reference to an object and in strict mode can be any value.</p>\n</blockquote>\n<p>翻译一下：this是执行上下文的一个属性，在非严格模式中始终指向一个对象，而在严格模式中this可以是任何值。</p>\n<h2 id=\"严格模式与非严格模式下-this的差异\"><a href=\"#严格模式与非严格模式下-this的差异\" class=\"headerlink\" title=\"严格模式与非严格模式下 this的差异\"></a>严格模式与非严格模式下 this的差异</h2><p>在非严格模式下，若未通过<code>apply/call</code>等方式改变了调用，<code>this</code>会默认指向全局对象（浏览器下指向<code>window</code>，node指向<code>global</code>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// In a browser:</span><br><span class=\"line\">f1() === window; // true</span><br><span class=\"line\"></span><br><span class=\"line\">// In Node:</span><br><span class=\"line\">f1() === global; // true</span><br></pre></td></tr></table></figure></p>\n<p>在严格模式下，若<code>this</code>未被执行上下文定义，那么他会始终保持为<code>undefined</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f2() &#123;</span><br><span class=\"line\">  &apos;use strict&apos;; // see strict mode</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f2() === undefined; // true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"经典面试题\"><a href=\"#经典面试题\" class=\"headerlink\" title=\"经典面试题\"></a>经典面试题</h2><p>一个经典的面试题，以下代码在浏览器执行后会打印出什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 5;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 10,</span><br><span class=\"line\">    foo: function() &#123;</span><br><span class=\"line\">        console.log(this.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var bar = obj.foo;</span><br><span class=\"line\">obj.foo();</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n<p>首先要明确一点，<code>执行上下文</code><strong>是在方法执行(或者说被调用)的时候才产生的</strong>，所以<code>this</code>也只有在方法执行时才能确定值。</p>\n<p>当<code>obj.foo()</code>执行时，这个时候可以确定是<code>obj</code>调用了<code>foo</code>方法，所以<code>this</code>指向了<code>obj</code>。<code>foo</code>方法中的访问的<code>this.a</code>此时实际上就是<code>obj.a</code>，打印出的结果是<code>10</code>。</p>\n<p>我们再往下看，当<code>bar()</code>执行时，<code>bar</code>并没有明确的调用对象，因此这里<code>this</code>使用了默认绑定，在非严格模式下指向了全局对象。(关于默认绑定后面的章节会讲)</p>\n<p>除了用默认绑定来解释以外，我个人认为其实还可以从另一个角度来看这个问题，已知此时<code>bar</code>就相当于<code>obj.foo</code>，<code>this</code>应该指向的是调用了<code>bar</code>方法的那个对象，可是这个时候又是谁调用了<code>bar</code>方法呢？</p>\n<p>假如我们能以某种方式将<code>bar()</code>改写成<code>x.bar()</code>，这样的话不就和上一步的<code>obj.foo()</code>一样了吗？我们也就能得到<code>foo</code>是由<code>x</code>调用的，<code>this</code>指向的就是<code>x</code>。所以这个问题又变成了<code>x</code>是否存在？</p>\n<p>这个神秘的<code>x</code>其实就是全局对象呀！在浏览器环境下，<code>x</code>其实就是window。因为这里的<code>bar</code>是一个全局变量，所以可以通过<code>window.bar</code>访问到。因此在<code>bar()</code>执行时，<code>this</code>指向了全局对象(window)，打印的值就是<code>window.a</code>，也就是<code>5</code>。</p>\n<h2 id=\"Array中的this\"><a href=\"#Array中的this\" class=\"headerlink\" title=\"Array中的this\"></a>Array中的this</h2><p>再看一个Array中的this，以下代码在浏览器执行后会打印出什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var arr = [fn, 1, 2];</span><br><span class=\"line\">arr[0]();</span><br></pre></td></tr></table></figure></p>\n<p>是不是第一眼看到这段代码感觉有点懵逼？WTF？<code>this</code>不是只能指向一个Object的吗？来个Array是什么鬼？</p>\n<p>乍一看Array好像跟Object没什么关系，其实抛开map、reduce、filter等等这些数组的操作方法，我们常用的对数组的访问方式无非也就是<code>arr[index]</code>和<code>arr.length</code>吧。</p>\n<p>对于上面的这个数组<code>arr</code>来说，<code>arr[0]</code>是<code>fn</code>，<code>arr[1]</code>是<code>1</code>，<code>arr[2]</code>是<code>2</code>，<code>arr.length</code>是<code>3</code>。那我们是不是可以构造出一个类数组的对象，将数组下标作为<code>key</code>，数组元素作为对应的<code>value</code>，并且提供一个<code>length</code>属性代表<code>key</code>的总数，就像下面这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var arrLike = &#123;</span><br><span class=\"line\">    &apos;0&apos;: fn,</span><br><span class=\"line\">    &apos;1&apos;: 1,</span><br><span class=\"line\">    &apos;2&apos;: 2,</span><br><span class=\"line\">    &apos;length&apos;: 3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arrLike[&apos;0&apos;]();</span><br></pre></td></tr></table></figure></p>\n<p>所以啊，Array是一个特殊的Object。如果用<code>arrLike</code>这个类数组的对象代入，是不是感觉清晰了一点？</p>\n<p>已知<code>arrLike[&#39;0&#39;]</code>是<code>fn</code>，相当于以<code>arrLike.0()</code>这种形式调用了<code>foo</code>方法(只是为了方便说明，实际上不能以这种方式执行)，所以<code>this</code>指向了<code>arrLike</code>，打印出的结果就是<code>arrLike</code>本身，而对于再往上的例子来说，打印出的结果就是<code>arr</code>本身。</p>\n<h2 id=\"this的默认绑定\"><a href=\"#this的默认绑定\" class=\"headerlink\" title=\"this的默认绑定\"></a>this的默认绑定</h2><p>如果函数没有明确的调用对象，也就是说函数是独立调用的情况下，this会使用默认绑定，非严格模式下<code>this</code>指向全局对象，严格模式下，<code>this</code>绑定到<code>undefined</code>，严格模式不允许<code>this</code>指向全局对象。</p>\n<p>在函数中以函数作为参数传递，例如<code>setTimeOut</code>和<code>setInterval</code>等，这些函数中传递的函数中的<code>this</code>指向，在非严格模式指向的是全局对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &apos;a&apos;;</span><br><span class=\"line\">var b = &#123;</span><br><span class=\"line\">    name: &apos;b&apos;,</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    setTimeout(function()&#123;</span><br><span class=\"line\">        console.log(&apos;this is &apos;, this.name);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    console.log(&apos;this is &apos;, this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b.foo();</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<code>setTimeout</code>中的注册的<code>function</code>是个匿名函数，没有明确的调用对象，该函数是独立调用，所以对于这个<code>function</code>来说，<code>this</code>使用了默认绑定指向了全局对象。因此<code>setTimeout</code>中打印出了<code>name</code>的值，即<code>a</code>。这段代码执行出来的结果就是<code>this is b</code>和<code>this is a</code>。</p>\n<p>咦，明明<code>setTimeout</code>写在前，为什么实际上却先执行了<code>console.log(&#39;this is &#39;, this.name);</code>呢？这需要另外写一篇文章来讲一下Event Loop了。</p>\n<h2 id=\"this的隐式绑定\"><a href=\"#this的隐式绑定\" class=\"headerlink\" title=\"this的隐式绑定\"></a>this的隐式绑定</h2><p>当函数引用有上下文对象时，<code>this</code>会使用隐式绑定，指向这个上下文对象。</p>\n<p>简单的说，就是当一个函数作为一个对象的引用属性时，如果通过这个对象调用该函数，函数中的<code>this</code>就将被绑定到这个对象上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 10,</span><br><span class=\"line\">    foo: function() &#123;</span><br><span class=\"line\">        console.log(this.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.foo();</span><br></pre></td></tr></table></figure></p>\n<p>文字解释总是晦涩难懂，对着代码解释才更好理解。<code>obj</code>作为一个对象，<code>foo</code>是<code>obj</code>的一个引用属性，<code>obj.foo()</code>就是”通过这个对象调用该函数”，也就是<code>obj</code>是<code>foo</code>的上下文，因此<code>this</code>使用隐式绑定指向了<code>obj</code>。</p>\n<h3 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h3><p>隐式丢失指的是函数中的<code>this</code>丢失了上下文对象，此时函数没有明确的调用对象(即上下文)，因此会应用默认绑定。主要有两种情况会发生隐式丢失：</p>\n<ul>\n<li><p>对象中的函数被赋值给一个全局变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log( this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var bar = obj.foo; // obj对象中的foo函数被赋值给了一个全局变量bar</span><br><span class=\"line\">var a = 1;</span><br><span class=\"line\">bar();  // 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在回调函数中被调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log( this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function bar(fn) &#123;</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 1;</span><br><span class=\"line\">// obj.foo在函数bar中被调用</span><br><span class=\"line\">bar(obj.foo);  // 1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"this的显式绑定\"><a href=\"#this的显式绑定\" class=\"headerlink\" title=\"this的显式绑定\"></a>this的显式绑定</h2><p>显式绑定是指通过<code>call/apply</code>修改了函数<code>this</code>的指向，也就是修改了函数的上下文对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var b = &#123;</span><br><span class=\"line\">  a: 2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.call(b);  // 2</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>call</code>改变了<code>foo</code>的上下文，指向了<code>b</code>，所以打印出来的结果是<code>b.a</code>，即<code>2</code>。</p>\n<h3 id=\"硬绑定\"><a href=\"#硬绑定\" class=\"headerlink\" title=\"硬绑定\"></a>硬绑定</h3><p>通过指定上下文，可以解决隐式丢失的问题。最简单的例子就是<code>es5</code>的<code>bind</code>函数。实现一个简单的<code>bind</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function myBind(fn, context) &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        return fn.apply(context, arguments);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p>使用<code>new</code>关键字来调用函数时，函数内部的<code>this</code>会指向什么？关键在于理解<code>new</code>到底做了什么。</p>\n<p>这部分我觉得可以单独写一篇文字聊一聊<code>new</code>以及如何实现一个<code>new</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>浅谈一下个人对JS的this的理解。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>先来看一下MDN上对this的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">定义</a></p>\n<blockquote>\n<p>A property of an execution context (global, function or eval) that, in non–strict mode, is always a reference to an object and in strict mode can be any value.</p>\n</blockquote>\n<p>翻译一下：this是执行上下文的一个属性，在非严格模式中始终指向一个对象，而在严格模式中this可以是任何值。</p>\n<h2 id=\"严格模式与非严格模式下-this的差异\"><a href=\"#严格模式与非严格模式下-this的差异\" class=\"headerlink\" title=\"严格模式与非严格模式下 this的差异\"></a>严格模式与非严格模式下 this的差异</h2><p>在非严格模式下，若未通过<code>apply/call</code>等方式改变了调用，<code>this</code>会默认指向全局对象（浏览器下指向<code>window</code>，node指向<code>global</code>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// In a browser:</span><br><span class=\"line\">f1() === window; // true</span><br><span class=\"line\"></span><br><span class=\"line\">// In Node:</span><br><span class=\"line\">f1() === global; // true</span><br></pre></td></tr></table></figure></p>\n<p>在严格模式下，若<code>this</code>未被执行上下文定义，那么他会始终保持为<code>undefined</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f2() &#123;</span><br><span class=\"line\">  &apos;use strict&apos;; // see strict mode</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f2() === undefined; // true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"经典面试题\"><a href=\"#经典面试题\" class=\"headerlink\" title=\"经典面试题\"></a>经典面试题</h2><p>一个经典的面试题，以下代码在浏览器执行后会打印出什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 5;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 10,</span><br><span class=\"line\">    foo: function() &#123;</span><br><span class=\"line\">        console.log(this.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var bar = obj.foo;</span><br><span class=\"line\">obj.foo();</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure></p>\n<p>首先要明确一点，<code>执行上下文</code><strong>是在方法执行(或者说被调用)的时候才产生的</strong>，所以<code>this</code>也只有在方法执行时才能确定值。</p>\n<p>当<code>obj.foo()</code>执行时，这个时候可以确定是<code>obj</code>调用了<code>foo</code>方法，所以<code>this</code>指向了<code>obj</code>。<code>foo</code>方法中的访问的<code>this.a</code>此时实际上就是<code>obj.a</code>，打印出的结果是<code>10</code>。</p>\n<p>我们再往下看，当<code>bar()</code>执行时，<code>bar</code>并没有明确的调用对象，因此这里<code>this</code>使用了默认绑定，在非严格模式下指向了全局对象。(关于默认绑定后面的章节会讲)</p>\n<p>除了用默认绑定来解释以外，我个人认为其实还可以从另一个角度来看这个问题，已知此时<code>bar</code>就相当于<code>obj.foo</code>，<code>this</code>应该指向的是调用了<code>bar</code>方法的那个对象，可是这个时候又是谁调用了<code>bar</code>方法呢？</p>\n<p>假如我们能以某种方式将<code>bar()</code>改写成<code>x.bar()</code>，这样的话不就和上一步的<code>obj.foo()</code>一样了吗？我们也就能得到<code>foo</code>是由<code>x</code>调用的，<code>this</code>指向的就是<code>x</code>。所以这个问题又变成了<code>x</code>是否存在？</p>\n<p>这个神秘的<code>x</code>其实就是全局对象呀！在浏览器环境下，<code>x</code>其实就是window。因为这里的<code>bar</code>是一个全局变量，所以可以通过<code>window.bar</code>访问到。因此在<code>bar()</code>执行时，<code>this</code>指向了全局对象(window)，打印的值就是<code>window.a</code>，也就是<code>5</code>。</p>\n<h2 id=\"Array中的this\"><a href=\"#Array中的this\" class=\"headerlink\" title=\"Array中的this\"></a>Array中的this</h2><p>再看一个Array中的this，以下代码在浏览器执行后会打印出什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var arr = [fn, 1, 2];</span><br><span class=\"line\">arr[0]();</span><br></pre></td></tr></table></figure></p>\n<p>是不是第一眼看到这段代码感觉有点懵逼？WTF？<code>this</code>不是只能指向一个Object的吗？来个Array是什么鬼？</p>\n<p>乍一看Array好像跟Object没什么关系，其实抛开map、reduce、filter等等这些数组的操作方法，我们常用的对数组的访问方式无非也就是<code>arr[index]</code>和<code>arr.length</code>吧。</p>\n<p>对于上面的这个数组<code>arr</code>来说，<code>arr[0]</code>是<code>fn</code>，<code>arr[1]</code>是<code>1</code>，<code>arr[2]</code>是<code>2</code>，<code>arr.length</code>是<code>3</code>。那我们是不是可以构造出一个类数组的对象，将数组下标作为<code>key</code>，数组元素作为对应的<code>value</code>，并且提供一个<code>length</code>属性代表<code>key</code>的总数，就像下面这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var arrLike = &#123;</span><br><span class=\"line\">    &apos;0&apos;: fn,</span><br><span class=\"line\">    &apos;1&apos;: 1,</span><br><span class=\"line\">    &apos;2&apos;: 2,</span><br><span class=\"line\">    &apos;length&apos;: 3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">arrLike[&apos;0&apos;]();</span><br></pre></td></tr></table></figure></p>\n<p>所以啊，Array是一个特殊的Object。如果用<code>arrLike</code>这个类数组的对象代入，是不是感觉清晰了一点？</p>\n<p>已知<code>arrLike[&#39;0&#39;]</code>是<code>fn</code>，相当于以<code>arrLike.0()</code>这种形式调用了<code>foo</code>方法(只是为了方便说明，实际上不能以这种方式执行)，所以<code>this</code>指向了<code>arrLike</code>，打印出的结果就是<code>arrLike</code>本身，而对于再往上的例子来说，打印出的结果就是<code>arr</code>本身。</p>\n<h2 id=\"this的默认绑定\"><a href=\"#this的默认绑定\" class=\"headerlink\" title=\"this的默认绑定\"></a>this的默认绑定</h2><p>如果函数没有明确的调用对象，也就是说函数是独立调用的情况下，this会使用默认绑定，非严格模式下<code>this</code>指向全局对象，严格模式下，<code>this</code>绑定到<code>undefined</code>，严格模式不允许<code>this</code>指向全局对象。</p>\n<p>在函数中以函数作为参数传递，例如<code>setTimeOut</code>和<code>setInterval</code>等，这些函数中传递的函数中的<code>this</code>指向，在非严格模式指向的是全局对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name = &apos;a&apos;;</span><br><span class=\"line\">var b = &#123;</span><br><span class=\"line\">    name: &apos;b&apos;,</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">    setTimeout(function()&#123;</span><br><span class=\"line\">        console.log(&apos;this is &apos;, this.name);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    console.log(&apos;this is &apos;, this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b.foo();</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<code>setTimeout</code>中的注册的<code>function</code>是个匿名函数，没有明确的调用对象，该函数是独立调用，所以对于这个<code>function</code>来说，<code>this</code>使用了默认绑定指向了全局对象。因此<code>setTimeout</code>中打印出了<code>name</code>的值，即<code>a</code>。这段代码执行出来的结果就是<code>this is b</code>和<code>this is a</code>。</p>\n<p>咦，明明<code>setTimeout</code>写在前，为什么实际上却先执行了<code>console.log(&#39;this is &#39;, this.name);</code>呢？这需要另外写一篇文章来讲一下Event Loop了。</p>\n<h2 id=\"this的隐式绑定\"><a href=\"#this的隐式绑定\" class=\"headerlink\" title=\"this的隐式绑定\"></a>this的隐式绑定</h2><p>当函数引用有上下文对象时，<code>this</code>会使用隐式绑定，指向这个上下文对象。</p>\n<p>简单的说，就是当一个函数作为一个对象的引用属性时，如果通过这个对象调用该函数，函数中的<code>this</code>就将被绑定到这个对象上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 10,</span><br><span class=\"line\">    foo: function() &#123;</span><br><span class=\"line\">        console.log(this.a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.foo();</span><br></pre></td></tr></table></figure></p>\n<p>文字解释总是晦涩难懂，对着代码解释才更好理解。<code>obj</code>作为一个对象，<code>foo</code>是<code>obj</code>的一个引用属性，<code>obj.foo()</code>就是”通过这个对象调用该函数”，也就是<code>obj</code>是<code>foo</code>的上下文，因此<code>this</code>使用隐式绑定指向了<code>obj</code>。</p>\n<h3 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h3><p>隐式丢失指的是函数中的<code>this</code>丢失了上下文对象，此时函数没有明确的调用对象(即上下文)，因此会应用默认绑定。主要有两种情况会发生隐式丢失：</p>\n<ul>\n<li><p>对象中的函数被赋值给一个全局变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log( this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var bar = obj.foo; // obj对象中的foo函数被赋值给了一个全局变量bar</span><br><span class=\"line\">var a = 1;</span><br><span class=\"line\">bar();  // 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在回调函数中被调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log( this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function bar(fn) &#123;</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 1;</span><br><span class=\"line\">// obj.foo在函数bar中被调用</span><br><span class=\"line\">bar(obj.foo);  // 1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"this的显式绑定\"><a href=\"#this的显式绑定\" class=\"headerlink\" title=\"this的显式绑定\"></a>this的显式绑定</h2><p>显式绑定是指通过<code>call/apply</code>修改了函数<code>this</code>的指向，也就是修改了函数的上下文对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(this.a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var b = &#123;</span><br><span class=\"line\">  a: 2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.call(b);  // 2</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>call</code>改变了<code>foo</code>的上下文，指向了<code>b</code>，所以打印出来的结果是<code>b.a</code>，即<code>2</code>。</p>\n<h3 id=\"硬绑定\"><a href=\"#硬绑定\" class=\"headerlink\" title=\"硬绑定\"></a>硬绑定</h3><p>通过指定上下文，可以解决隐式丢失的问题。最简单的例子就是<code>es5</code>的<code>bind</code>函数。实现一个简单的<code>bind</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function myBind(fn, context) &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        return fn.apply(context, arguments);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p>使用<code>new</code>关键字来调用函数时，函数内部的<code>this</code>会指向什么？关键在于理解<code>new</code>到底做了什么。</p>\n<p>这部分我觉得可以单独写一篇文字聊一聊<code>new</code>以及如何实现一个<code>new</code>。</p>\n"},{"title":"test","date":"2019-04-09T08:11:26.000Z","_content":"just for test","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2019-04-09 16:11:26\ntags:\n---\njust for test","slug":"test","published":1,"updated":"2019-09-26T03:00:12.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1644znt00036nt8z18jb5v3","content":"<p>just for test</p>\n","site":{"data":{}},"excerpt":"","more":"<p>just for test</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1644znm00026nt847tgurgf","category_id":"ck1644znz00046nt87xum6c95","_id":"ck1644zoi00076nt8lkvvc7vj"}],"PostTag":[{"post_id":"ck1644znm00026nt847tgurgf","tag_id":"ck1644zod00056nt83kvjd69y","_id":"ck1644zoi00066nt8v0bukzl4"}],"Tag":[{"name":"执行上下文","_id":"ck1644zod00056nt83kvjd69y"}]}}